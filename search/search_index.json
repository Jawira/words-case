{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Case Converter","text":"<p>To use Case Converter you have to instantiate <code>Convert</code> class, to do so you can use the <code>new</code> keyword or the CaseConverter factory class.</p> <p>The string you want to convert should be passed at instantiation. This cannot be changed later since <code>Convert</code> class is immutable.</p> <pre><code>$var = new Convert('string-to-convert');\n</code></pre> <p>Typically, you are going to call <code>Convert</code> methods this way:</p> <p></p>"},{"location":"index.html#basic-usage","title":"Basic usage","text":"<p>Code:</p> <pre><code>use Jawira\\CaseConverter\\Convert;\n\n$robot = new Convert('The-Terminator');\n\necho $robot-&gt;toPascal(); // TheTerminator\necho $robot-&gt;toCobol();  // THE-TERMINATOR\necho $robot-&gt;toSnake();  // the_terminator\n</code></pre>"},{"location":"index.html#explicit-case-detection","title":"Explicit case detection","text":"<p>In some edge cases you have to explicitly set the format of input string to have the desired output:</p> <pre><code>use Jawira\\CaseConverter\\Convert;\n\n$agency = new Convert('FBI');\n\n$agency-&gt;fromAda();\necho $agency-&gt;toCobol();   // FBI\necho $agency-&gt;toSnake();   // fbi\n\n$agency-&gt;fromCamel();\necho $agency-&gt;toCobol();   // F-B-I\necho $agency-&gt;toSnake();   // f_b_i\n\n$agency-&gt;fromAuto();\necho $agency-&gt;toCobol();   // FBI\necho $agency-&gt;toSnake();   // fbi\n</code></pre>"},{"location":"index.html#force-simple-case-mapping","title":"Force Simple Case-Mapping","text":"<p>You can still use Simple Case-Mapping even if you are using PHP 7.3 or newer:</p> <pre><code>&lt;?php declare(strict_types=1);\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nuse Jawira\\CaseConverter\\Convert;\n\n$robot = new Convert('Stra\u00dfe');\n\n$robot-&gt;forceSimpleCaseMapping();\necho $robot-&gt;toMacro();     // output: STRA\u00dfE\n</code></pre> <p>Learn more about Case-Mapping.</p>"},{"location":"index.html#using-the-factory","title":"Using the factory","text":"<p>CaseConverter factory is going to instantiate <code>Convert</code> class for you.</p> <p>In the following code <code>$this-&gt;cc</code> is an instance of <code>\\Jawira\\CaseConverter\\CaseConverter</code> and implements <code>\\Jawira\\CaseConverter\\CaseConverterInterface</code>. This is useful because the factory should be instantiated by the Dependency Injection mechanism provided by your favorite framework.</p> <pre><code>// Convert string to Pascal case\n$this-&gt;cc-&gt;convert('XML')-&gt;toPascal(); // Xml\n\n// Convert string to Snake case\n$this-&gt;cc-&gt;convert('v3.0.2')-&gt;toSnake(); // v3_0_2\n\n// Convert string to Camel case\n$this-&gt;cc-&gt;convert('first-name')-&gt;toCamel(); // firstName\n\n// Convert from Lower case to Dot case\n$this-&gt;cc-&gt;convert('non-SI units')-&gt;fromLower()-&gt;toDot(); // non-si.units\n\n// Get detected words\n$this-&gt;cc-&gt;convert('Mario Bros')-&gt;toArray(); // ['Mario', 'Bros']\n\n// Retrieve original string\n$this-&gt;cc-&gt;convert('use_the_force')-&gt;getSource(); // use_the_force\n</code></pre> <p>More about CaseConverter factory.</p>"},{"location":"api.html","title":"API","text":"<p>List of public methods.</p>"},{"location":"api.html#jawiracaseconverterconvert","title":"<code>\\Jawira\\CaseConverter\\Convert</code>","text":""},{"location":"api.html#string-conversion","title":"String conversion","text":"Method Description <code>toCamel()</code> Return string in Camel case format <code>toPascal()</code> Return string in Pascal case format <code>toSnake()</code> Return string in Snake case format <code>toAda()</code> Return string in Ada case format <code>toMacro()</code> Return string in Macro case format <code>toKebab()</code> Return string in Kebab case format <code>toTrain()</code> Return string in Train case format <code>toCobol()</code> Return string in Cobol case format <code>toLower()</code> Return string in Lower case format <code>toUpper()</code> Return string in Upper case format <code>toTitle()</code> Return string in Title case format <code>toSentence()</code> Return string in Sentence case format <code>toDot()</code> Return string in Dot notation"},{"location":"api.html#explicit-case-detection","title":"Explicit case detection","text":"Method Description <code>fromAuto()</code> (default) Auto-detect naming convention <code>fromCamel()</code> Split input string using uppercase characters <code>fromPascal()</code> Split input string using uppercase characters <code>fromSnake()</code> Split input string using <code>_</code> (underscore character) <code>fromAda()</code> Split input string using <code>_</code> (underscore character) <code>fromMacro()</code> Split input string using <code>_</code> (underscore character) <code>fromKebab()</code> Split input string using <code>-</code> (dash character) <code>fromTrain()</code> Split input string using <code>-</code> (dash character) <code>fromCobol()</code> Split input string using <code>-</code> (dash character) <code>fromLower()</code> Split input string using <code>\u2423</code> (space character) <code>fromUpper()</code> Split input string using <code>\u2423</code> (space character) <code>fromTitle()</code> Split input string using <code>\u2423</code> (space character) <code>fromSentence()</code> Split input string using <code>\u2423</code> (space character) <code>fromDot()</code> Split input string using <code>.</code> (dot character) <p>Please note that some methods are equivalent and have the same effect:</p> <ul> <li><code>fromDot()</code></li> <li><code>fromCamel()</code> \u2248 <code>fromPascal()</code></li> <li><code>fromSnake()</code> \u2248 <code>fromAda()</code> \u2248 <code>fromMacro()</code></li> <li><code>fromKebab()</code> \u2248 <code>fromTrain()</code> \u2248 <code>fromCobol()</code></li> <li><code>fromLower()</code> \u2248 <code>fromUpper()</code> \u2248 <code>fromTitle()</code> \u2248 <code>fromSentence()</code></li> </ul> <p>All these methods exists only for sake of completeness.</p>"},{"location":"api.html#utility-methods","title":"Utility methods","text":"Method Description <code>getSource()</code> Returns original input string <code>toArray()</code> Returns array with detected words <code>forceSimpleCaseMapping()</code> Output sting uses Simple Case-Mapping even if you are using PHP 7.3 or newer"},{"location":"api.html#jawiracaseconvertercaseconverter","title":"<code>\\Jawira\\CaseConverter\\CaseConverter</code>","text":""},{"location":"api.html#factory-method","title":"Factory method","text":"Method Description <code>convert()</code> Creates a <code>Convert</code> object"},{"location":"case-mapping.html","title":"Case-Mapping","text":""},{"location":"case-mapping.html#introduction","title":"Introduction","text":"<p>Case-mapping or case conversion is performed everytime a character is changed from upper case to lower case, or from lower case to upper case. Case converter performs case-mapping everytime you use it.</p> <p>There are two kind of case-mapping:</p> <ol> <li>Simple case-mapping</li> <li>Full case-mapping</li> </ol> <p>Simple case-mapping is one-to-one character mapping, for example a single character \"<code>A</code>\" is replaced with another single character \"<code>a</code>\".</p> <p>As you can image, Full case-mapping performs one-to-many character replacements (more precisely one-to-many code-points). In real world use-cases, it's rare to perform full case-mapping, this is because it only concerns a very small set of characters. For example in german language, the letter \"<code>\u00df</code>\" is strictly lowercase and should be mapped to \"<code>SS</code>\" in uppercase words.</p>"},{"location":"case-mapping.html#case-converter-behaviour","title":"Case-Converter behaviour","text":"<p>By default, Case-Converter will perform full case-mapping</p> <pre><code>// Full case-mapping\n$ger = new Convert('Stra\u00dfe');\necho $ger-&gt;toUpper(); // output: STRASSE\n</code></pre> <p>If you want to perform simple case-mapping then you have to call <code>-&gt;forceSimpleCaseMapping()</code>:</p> <pre><code>// Simple case-mapping\n$ger = new Convert('Stra\u00dfe');\n$ger-&gt;forceSimpleCaseMapping();\necho $ger-&gt;toUpper(); // output: STRA\u00dfE\n</code></pre> <p>As you can see, in full case-mapping string length can change.</p>"},{"location":"case-mapping.html#case-mapping-in-php","title":"Case-Mapping in PHP","text":"<p>PHP 7.3 introduced full case-mapping, you can have one-to-many character mapping. In practice this means than you can have different results depending on your PHP version.</p> <p>Internally Case-Converter uses mb_convert_case() . This function works in conjunction with specific constants to tell what action to perform. For example:</p> <pre><code>mb_convert_case('Foo', MB_CASE_UPPER); // FOO\n</code></pre> <p>Prior to PHP 7.3, these were the available constants and their use:</p> Constant Meaning MB_CASE_UPPER Performs simple upper-case fold conversion. MB_CASE_LOWER Performs simple lower-case fold conversion. MB_CASE_TITLE Performs simple title-case fold conversion. <p>But from PHP 7.3, new constants were added and their meaning changed:</p> Constant Meaning MB_CASE_UPPER Performs a full upper-case folding. MB_CASE_LOWER Performs a full lower-case folding. MB_CASE_TITLE Performs a full title-case conversion. MB_CASE_UPPER_SIMPLE Performs simple upper-case fold conversion. MB_CASE_LOWER_SIMPLE Performs simple lower-case fold conversion. MB_CASE_TITLE_SIMPLE Performs simple title-case fold conversion."},{"location":"case-mapping.html#locale-dependent-mapping","title":"Locale dependent mapping","text":"<p>Some case-mapping are locale dependent. This is the case of Turkish where the small letter \"<code>i</code>\" should be replaced by a capital letter with a dot \"<code>\u0130</code>\". However, according to documentation:</p> <p>Only unconditional, language agnostic full case-mapping is performed.</p> <p>This means that locale dependent mapping are ignored and not performed.</p>"},{"location":"case-mapping.html#resources","title":"Resources","text":"PHP 7.3 Full Case-Mapping and Case-Folding Support https://www.php.net/manual/en/migration73.new-features.php#migration73.new-features.mbstring.case-mapping-folding mb_convert_case() https://www.php.net/manual/en/function.mb-convert-case.php mbstring constant https://www.php.net/manual/en/mbstring.constants.php"},{"location":"detection-algorithm.html","title":"Detection algorithm","text":"<p>When <code>\\Jawira\\CaseConverter\\Convert</code> class is instantiated, the input string is analysed to detect the words in it.</p> <p>This is also the algorithm used by <code>Convert::fromAuto</code> method.</p> <p></p> <ol> <li>If input string contains <code>_</code> (underscore character), then <code>_</code> is used to    split string.</li> <li>If input string contains <code>-</code> (dash character), then <code>-</code> is used to split    string.</li> <li>If input string contains <code>\u2423</code> (space character), then <code>\u2423</code> is used to split    string.</li> <li>If input string contains <code>.</code> (space character), then <code>.</code> is used to split    string.</li> <li>If input string contains uppercase characters only, then the input string is    considered to be a single word.</li> <li>Finally, uppercase characters are used to split string.</li> </ol>"},{"location":"dev.html","title":"Development notes","text":""},{"location":"dev.html#phing-targets","title":"Phing targets","text":"<ul> <li><code>$ phing setup</code>: Prepare project for development.</li> <li><code>$ phing qa</code>: Run quality tests, use this before every commit.</li> </ul>"},{"location":"dev.html#documentation","title":"Documentation","text":"<p>Documentation is built when a <code>release</code> is created.</p> <p>To install mkdocs locally type:</p> <pre><code>sudo -H pip install mkdocs\n</code></pre>"},{"location":"dev.html#using-phing-behind-a-proxy","title":"Using Phing behind a proxy","text":"<p>If you are developing behind a proxy, you have to set the environment variable <code>http_proxy</code>. This variable already is imported in <code>build.xml</code>, so you have nothing to do.</p>"},{"location":"dev.html#creating-new-convention","title":"Creating new convention","text":"<ol> <li>Create new Gluer class</li> <li>Create new split car</li> <li>Update <code>\\Jawira\\CaseConverter\\Convert::analyse</code> if needed</li> <li>Register into <code>\\Jawira\\CaseConverter\\Convert::handleSplitterMethod</code></li> <li>Register into <code>\\Jawira\\CaseConverter\\Convert::handleGluerMethod</code></li> <li>Update docblock <code>\\Jawira\\CaseConverter\\Convert</code> to register new methods.</li> <li>Update documentation</li> </ol>"},{"location":"dev.html#railroad-diagram","title":"Railroad diagram","text":"<ul> <li>https://tabatkins.github.io/railroad-diagrams/generator.html</li> </ul>"},{"location":"dev.html#class-diagrams","title":"Class diagrams","text":""},{"location":"known-issues.html","title":"Known issues","text":""},{"location":"known-issues.html#number-is-not-a-word","title":"Number is not a word","text":"<p>When using <code>case-converter</code> you cannot use a number as separator. In practice this means a number is always identified as a lower case letter.</p> <p></p> <p>As shown in the previous example, there is no way to go back to the original input string (i.e. <code>hello-8-world</code>), in _ kebab case_ this sting is written as <code>hello8-world</code>.</p> <p>Other examples (with automatic case detection):</p> <pre><code>(new Convert('REEL2REAL'))-&gt;toDot(); // r.e.e.l2.r.e.a.l\n(new Convert('reel2real'))-&gt;toDot(); // reel2real\n(new Convert('Reel2Real'))-&gt;toDot(); // reel2.real\n</code></pre> <p>I strongly suggest to avoid numbers in strings to be converted.</p>"},{"location":"known-issues.html#mixed-conventions","title":"Mixed conventions","text":"<p>It might be evident, but Case Converter cannot handle string with mixed naming conventions.</p> <p>For example the string <code>XMLHttpRequest</code> will result in <code>x.m.l.http.request</code> when using dot notation:</p> <pre><code>$xhr = new Convert('XMLHttpRequest');\n$xhr-&gt;toDot() // x.m.l.http.request\n</code></pre> <p>The correct way to name this string (for Case Converter) should have been <code>XmlHttpRequest</code>.</p> <p>Another example of mixed conventions:</p> \u274c Wrong \u2705 Good PHP_CodeSniffer php_code_sniffer PHP_CodeSniffer PhpCodeSniffer PHPUnit PhpUnit PHPUnit php-unit"},{"location":"naming-conventions.html","title":"Naming conventions","text":"<p>Naming conventions are also referred as:</p> <ul> <li>Naming style</li> <li>Case convention</li> </ul>"},{"location":"naming-conventions.html#reference-matrix","title":"Reference matrix","text":"Lower case Title case Upper case Sentence case <code>_</code> (underscore) Snake case Ada case Macro case - <code>-</code> (dash) Kebab case Train case Cobol case - <code>.</code> (dot) Dot notation - - - <code>\u2423</code> (space) Lower case Title case Upper case Sentence case <code></code> (empty string) - Camel casePascal case - -"},{"location":"naming-conventions.html#description-table-wip","title":"Description table (wip)","text":"Convention name Description Usage AKA Camel case PHP method names Camel caps, Medial capitals, Lower camel case Pascal case PHP class names Upper camel case Snake case All letters in lower-case separated with a <code>_</code> (underscore) PHP functions Ada case Macro case PHP constants Kebab case Train case Cobol case Dot notation Lower case Title case Upper case Sentence case"},{"location":"naming-conventions.html#resources","title":"Resources","text":"<ul> <li>https://dev.to/prahladyeri/underscores-camelcasing-and-pascalcasing-the-three-naming-conventions-every-programmer-should-be-aware-of-3aed</li> <li>https://en.wikipedia.org/wiki/Letter_case</li> <li>https://en.wikipedia.org/wiki/Naming_convention_(programming)</li> </ul>"},{"location":"using-the-factory.html","title":"Using the factory","text":"<p>Besides <code>\\Jawira\\CaseConverter\\Convert</code> you also have at your disposal:</p> <ul> <li><code>\\Jawira\\CaseConverter\\CaseConverter</code></li> <li><code>\\Jawira\\CaseConverter\\CaseConverterInterface</code></li> </ul> <p>Instead of using <code>new Convert();</code> you can use the convenience method from <code>CaseConverter</code> class.</p> <p>In concrete, you have to call <code>\\Jawira\\CaseConverter\\CaseConverter::convert</code> to create <code>Convert</code> objects.</p> <p>Here an example:</p> <pre><code>&lt;?php\nnamespace App;\n\nuse Jawira\\CaseConverter\\CaseConverterInterface;\n\nclass MySuperNameCreator\n{\n    protected $cc;\n\n    public function __construct(CaseConverterInterface $cc)\n    {\n        $this-&gt;cc = $cc;\n    }\n\n    public function variableName(string $slug): string\n    {\n        // `-&gt;convert()` returns a `Convert` object.\n        $myConvert = $this-&gt;cc-&gt;convert($slug);\n        return $myConvert-&gt;toCamel();\n    }\n\n    public function constantName(string $slug): string\n    {\n        // Of course you can also chain everything.\n        return $this-&gt;cc-&gt;convert($slug)-&gt;fromKebab()-&gt;toMacro();\n    }\n}\n</code></pre> <p>Please note that an interface -<code>CaseConverterInterface</code>- is also provided. If you are using Symfony you can use this interface with Symfony autowiring to automatically instantiate <code>CaseConverter</code>, otherwise if you are working in a standalone project you should try php-di project.</p> <p>Using <code>\\Jawira\\CaseConverter\\CaseConverter::convert</code> is preferred because:</p> <ul> <li>Usually the <code>new</code> operator is considered harmful.</li> <li>You can easily mock dependencies when writing tests.</li> <li>It's SOLID</li> </ul>"}]}